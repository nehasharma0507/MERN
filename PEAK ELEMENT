#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

int main()
 {
    int findpeak(int arr[],int n);
    int peakIndex=0;
    int i,n,arr[i];
       
       for(i=1;i<n;i++)
    {
        if (arr[i] > arr[peakIndex]){
            peakIndex=i;
        }
        return arr[peakIndex];
    }
}
int main ()
{
    int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    int peak=findpeak(arr,n);
    printf("%d\n",peak);
    return 0;
}
void rotateArray(int arr[], int n, int m) {
    m = m % n;
    int temp[m];
    for (int i = 0; i < m; i++)
        temp[i] = arr[i];
    for (int i = m; i < n; i++)
        arr[i - m] = arr[i];
        for (int i = 0; i < m; i++)
        arr[n - m + i] = temp[i];
}
int main() {
    int n, m;
     printf("%d",n);
     scanf("%d", &n);
     printf("%d",m);
   
    scanf("%d", &m);
     int arr[n];
   
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    rotateArray(arr, n, m);
 
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");

    return 0;
}
int cmpfunc(const void*a,const void*b)
{
    return((int)a-(int)b);
}
int kthSmallest(int arr[], int N, int K)
{
    qsort(arr,N,sizeof(int),cmpfunc);
    return arr[K-1];
}
int main()
{
    int arr[] = {1,3,5,6,5,6};
    int N = sizeof(arr) / sizeof(arr[0]), K=2;
    printf("%d",kthSmallest(arr,N,K));
    return 0;
}
int main() 
{ 
    int arr[] = {3,1,5,5,3}; 
    int n=sizeof(arr)/sizeof(arr[0]); 
    int num[n];
    for(int i=0; i < n; i++)
    {
        if(num[i]==0)
        {
            int count = 1;
            for(int j = i+1; j < n; j++) 
            {
                if(arr[i]==arr[j]) 
                { 
                    count++; 
                    num[j] = 1; 
                } 
            } 
            if(count>1)
                printf("%d",arr[i]);
                else
                printf("no element found""%d\n",count);
        }
    }
   return 0; 
}
